class Solution {
    public boolean search(int[] nums, int target) {
        //finding the sorted part
        //then determining did the target lies in between 
        //that range and eliminating the corresponding half 
        int s = 0  ,e = nums.length-1,mid = 0;
        if(nums.length == 1)return nums[0]==target;
        
        //In this case the elements are not unique 
        //thre are duplicates so ween end to make sure that 
        //the low,mid and high doesn't have to contain the same element
        //as it is clear that they didn't contain the target eleent
        
        while(s<=e){
            
            mid = s + (e-s)/2;
            if(nums[mid] == target)return true;
           if(nums[s] == nums[mid] && nums[mid]==nums[e]){
                s++;
                e--;
                continue;
            }
            if(nums[s]<=nums[mid]){
                if(nums[s]<=target && target<nums[mid]){
                    e = mid-1;
                }
                else{
                    s = mid+1;
                }
            }
            
            else{
                if(nums[mid]<target && target<=nums[e]){
                    s=  mid+1;
                }
                else{
                    e = mid-1;
                }
            }
        }
        return false;
    }
}
