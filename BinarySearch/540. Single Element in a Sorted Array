class Solution {
    
    public int singleNonDuplicate(int[] nums) {
        //two pointers 
        //the elements on the left half of mid element 
        //follows tha pair(even,odd)
        //on tht right side(odd,even)
        
        
        int n = nums.length;
        if(n==1)return nums[0];
        
        //boundary cases
        if(nums[0]!=nums[1])return nums[0];
        
        if(nums[n-1]!=nums[n-2])return nums[n-1];
        
        int s = 1 , e = n-2 , mid = 0;
        while(s<=e){
            mid = s + (e-s)/2;
            
            ///checkign for single element
            
            if(nums[mid] != nums[mid-1] && nums[mid] != nums[mid+1])return nums[mid];
            
            //otherwise i need to check whether I am in left 
            //or right half
            if(mid%2==0 && nums[mid]==nums[mid+1] || mid%2!=0 && nums[mid] == nums[mid-1])s = mid+1;
            else e = mid-1;
        }
        return -1;
    }
}
