class Solution {
    private static void dfs(int node,List<List<Integer>> adj,boolean[] visited){
        
        List<Integer> l = adj.get(node);
        if(l.isEmpty())return ;
        for(int val:l){
            if(!visited[val]){
                visited[val] = true;
                dfs(val,adj,visited);
            }
        }
    }
    
    private static int noOfProvinces(List<List<Integer>> adj,int v){
        boolean visited[] = new boolean[v];
        int cnt = 0;
        
        //o to v vertices are present in the graph 
        //so we have to run DFS on the vertices
        //this gives the cnt of number of provinces
        for(int i=0 ; i<v ; i++){
            if(!visited[i]){
                visited[i] = true;
                cnt++;
                dfs(i,adj,visited);
            }
        }
        
        return cnt;
        
    }
    
    public int findCircleNum(int[][] isConnected) {
        List<List<Integer>> adj = new ArrayList<>();
        int v =  isConnected.length;
        for(int i=0 ; i<v ; i++){
            adj.add(new ArrayList<Integer>());
        }
        
        for(int i=0 ; i<v ; i++){
            for(int j=0 ; j<v ; j++){
                if(isConnected[i][j]==1 && i!=j){
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }
        
        return noOfProvinces(adj,v);
        
    }
    
}
