class pair{
        int x;
        int y;
        pair(int i,int j){
            x= i;
            y = j;
        }
}

class Solution {
    

    
    private static int isAllRotten(int[][] grid,Queue<pair> q,int cnt){
        
        int  n = grid.length , m = grid[0].length; 
        
        int min = 0,rot = 0;
        
        //all the four directions
        int[] dx = {0,0,1,-1};
        int[] dy = {1,-1,0,0};
        
        
        //while the queue is empty
        //apply BFS to calcualte the minutes requied 
        while(!q.isEmpty()){
            rot+= q.size();
            int size = q.size();
            for(int k=0 ; k<size ; k++){

                pair p1 = q.poll();
                int x = p1.x;
                int y = p1.y;
                for(int i=0 ; i<4 ; i++){
                    int newX = x + dx[i];
                    int newY = y + dy[i];
                    if (!(newX >= 0 && newY >= 0 && newX < n && newY < m)) continue;
                    if (grid[newX][newY] == 0 || grid[newX][newY] == 2) continue;
                    
                        grid[newX][newY] = 2;
                        pair p = new pair(newX, newY);
                        q.add(p);
                    
                }

            }
             if(!q.isEmpty()) min++;
        }
        
        return cnt==rot?min:-1;
    }
    
    public int orangesRotting(int[][] grid) {
        Queue<pair> q = new LinkedList<>();
        //to count the number of oranges in the 
        //grid
        int cnt = 0 , n = grid.length , m = grid[0].length;
        for(int i=0 ; i<n ; i++){
            for(int j=0 ; j<m  ; j++){
                if(grid[i][j] !=0)cnt++;
                if(grid[i][j]==2){
                    pair p = new pair(i,j);
                    q.add(p);
                }
            }
        }
        
        return isAllRotten(grid,q,cnt);
    }
}994. Rotting Oranges
