class Solution {
    
        
    private static boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        
        return true;
    }
    
    
    public static void primesWithinRange(boolean[] arr, int n) {
        for (int i = 2; i <= Math.sqrt(n); i++) {
            //if it is a prime 
            //marking all its mutliples to be composite
            if (isPrime(i)) {
                int p = i * i;
                while (p <= n) {
                    arr[p] = true;
                    p += i;
                }
            }
        }
    }
    
    public int countPrimes(int N) {
        boolean arr[] = new boolean[N+1];
        primesWithinRange(arr,N);
        int cnt =0;
        for(int i=2 ; i<N ; i++){
            if(arr[i] == false){
                cnt++;
            }
        }
        return cnt;
        
    }
}
